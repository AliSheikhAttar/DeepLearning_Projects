#!/usr/bin/env python
# coding: utf-8

# ![0.jfif](attachment:0.jfif)

# <div style="direction:rtl">
# خب خب، درسته که نامپای ستون فقرات دیتا ساینیه، ولی ما کارامون رو با دست و چشم و پا انجام میدیم نه با خود ستون فقرات. برای همین تو این بخش زیاد تمرینای از جنس مساله نداریم و بیشتر تمرینامون حول تسلط به ابزار ها و متد های این کتابخونه است.
# <div style="direction:rtl">
# برای شروع، کتابخونه ی نامپای رو ایمپورت کنید.

# In[2]:


import numpy as np


# <div style="direction:rtl">
# یه آرایه ی متشکل از 10 تا صفر بسازید.

# In[3]:


np.zeros(10)


# <div style="direction:rtl">
# یه آرایه ی متشکل از 10 تا یک بسازید.

# In[4]:


np.ones(10)


# <div style="direction:rtl">
# یه آرایه ی متشکل از 10 تا پنج بسازید.

# In[5]:


np.ones(10)*5


# <div style="direction:rtl">
# یه آرایه ی متشکل از اعداد ده تا پنجاه بسازید.

# In[6]:


np.arange(10,51)


# <div style="direction:rtl">
# یه آرایه ی متشکل از اعداد زوج بین ده تا پنجاه بسازید.

# In[7]:


np.arange(10,51,2)


# <div style="direction:rtl">
# یه ماتریس سه در سه با مقادیر 0 تا 8 بسازید.

# In[8]:


np.arange(0,9).reshape(3,3)


# <div style="direction:rtl">
# یه ماتریس سه در سه قطری بسازید.

# In[9]:


np.eye(3)


# <div style="direction:rtl">
# یه ماتریس سه در سه با اعداد رندوم بسازید.

# In[10]:


np.random.rand(3,3)


# <div style="direction:rtl">
# یه ماتریس سه در سه با اعداد رندومی بسازید که به شکل نرمال حول 0 توزیع شده باشند.

# In[11]:


np.random.randn(3,3)


# <div style="direction:rtl">
# با دو روش مختلف دقیقا ماتریس زیر رو بسازید.

# In[12]:


np.arange(0.01,1.01,0.01).reshape(10,10)


# In[13]:


list = [[0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ],
       [0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 ],
       [0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 ],
       [0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 ],
       [0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 ],
       [0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6 ],
       [0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7 ],
       [0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8 ],
       [0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9 ],
       [0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.  ]]
np.array(list)


# <div style="direction:rtl">
# آرایه ای بسازید که شامل 20 تا عدد با فاصله های مساوی بین 0 و 1 باشه.

# In[14]:


np.linspace(0,1,20)


# <div style="direction:rtl">
# ابتدا ماتریس زیر را با نام mat بسازید و سپس تکه های خواسته شده از ماتریس در هر بخش را به دست آورید.

# In[15]:


mat = np.array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])


# In[16]:


mat


# In[17]:


mat[2:,1:]


# In[18]:


mat[3][4]


# In[19]:


mat[:3,1].reshape(3,1) 
mat[:3,1:2]


# In[20]:


mat[4]


# In[21]:


mat[3:5]


# In[22]:


mat[[0,2,4],:]


# In[23]:


mat[:,[0,2,4]]


# In[24]:


mat[[0,2,4],:][:,[0,2,4]]


# <div style="direction:rtl">
# جمع تک تک عناصر موجود در ماتریس را با استفاده از دو روش (یک بار متد و یک بار فانکشن) به دست آورید.

# In[25]:


count = 0 
for i in range(5):
    for j in range(5):
        count += mat[i][j]
count


# In[26]:


np.sum(mat)


# <div style="direction:rtl">
# در آمار ، انحراف معیار، مقدارپراکندگی مجموعه ای از مقادیر است. انحراف استاندارد پایین نشان می دهد که مقادیر نزدیک به میانگین مجموعه هستند ، در حالی که انحراف استاندارد بالا نشان می دهد که مقادیر در دامنه وسیع تری پخش شده اند.
# انحراف معیار را در ریاضیات با STD یا همان standard deviation نشان می دهند.
# <div style="direction:rtl">
# با تحقیق و جست و جو، متدی برای محاسبه ی std در این ماتریس پیدا کنید و انحراف معیار داده های این ماتریس را محاسبه کنید.

# In[27]:


np.std(mat)


# <div style="direction:rtl">
# در باره ی axis ها(محور ها) در نامپای تحقیق کنید و axis دیفالت نامپای را معرفی کنید، سپس با کمک axis ها جمع سطر ها وستون های ماتریس را  به دست آورید.

# <div style="direction:rtl">
# axis دیفالت نامپای در جهت :...

# عمودی

# <div style="direction:rtl">
# جمع سطر ها:
# (هم با متد هم با فانکشن)

# In[28]:


np.sum(mat,axis = 1)


# In[29]:


result = []
for x in range(5):
    q = 0
    for y in range(5):
        q += mat[x][y]
    result.append(q)
np.array(result)


# <div style="direction:rtl">
# جمع ستون ها :
# (هم با متد هم با فانکشن)

# In[30]:


np.sum(mat, axis = 0)


# In[31]:


result = []
for y in range(5):
    q = 0
    for x in range(5):
        q += mat[x][y]
    result.append(q)
np.array(result)


# <div style="direction:rtl">
# حالا با کمک مفهومی که از محور ها در عملیات های نامپای فرا گرفته اید، سعی کنید با دستور concatenate دو ماتریس زیر را یک بار در جهت محور عمودی و یک بار در جهت محور افقی بهم بچسبانید.

# In[32]:


a = np.arange(1,10).reshape(3,3)
a


# In[33]:


b = np.arange(1,10).reshape(3,3).transpose()
b


# <div style="direction:rtl">
# چسباندن در راستای افقی:

# In[34]:


np.concatenate((a,b),axis = 1 )


# <div style="direction:rtl">
# چسباندن در راستای عمودی:

# In[35]:


np.concatenate((a,b), axis = 0)


# <div style="direction:rtl">
# 
# ## موفق باشید.
